{"ast":null,"code":"var _jsxFileName = \"/home/mattia/Scrivania/detection-app/src/components/ImageDetection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useReducer } from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport './ImageDetection.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ImageDetection() {\n  _s();\n\n  const machine = {\n    initial: \"initial\",\n    states: {\n      initial: {\n        on: {\n          next: \"loadingModel\"\n        }\n      },\n      loadingModel: {\n        on: {\n          next: \"modelReady\"\n        }\n      },\n      modelReady: {\n        on: {\n          next: \"imageReady\"\n        }\n      },\n      imageReady: {\n        on: {\n          next: \"identifying\"\n        },\n        showImage: true\n      },\n      identifying: {\n        on: {\n          next: \"complete\"\n        }\n      },\n      complete: {\n        on: {\n          next: \"modelReady\"\n        },\n        showImage: true,\n        showResults: true\n      }\n    }\n  };\n  const [results, setResults] = useState([]);\n  const [imageURL, setImageURL] = useState(null);\n  const [model, setModel] = useState(null);\n  const imageRef = useRef();\n  const inputRef = useRef();\n\n  const reducer = (state, event) => machine.states[state].on[event] || machine.initial;\n\n  const [appState, dispatch] = useReducer(reducer, machine.initial);\n\n  const next = () => dispatch(\"next\");\n\n  const loadModel = async () => {\n    next();\n    const model = await mobilenet.load();\n    setModel(model);\n    next();\n  };\n\n  const unloadModel = async () => {\n    setModel(null);\n    setResults([]);\n  };\n\n  const identify = async () => {\n    next();\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n    next();\n  };\n\n  const reset = async () => {\n    setResults([]);\n    next();\n  };\n\n  const upload = () => inputRef.current.click();\n\n  const handleUpload = event => {\n    const {\n      files\n    } = event.target;\n\n    if (files.length > 0) {\n      const url = URL.createObjectURL(event.target.files[0]);\n      setImageURL(url);\n      next();\n    }\n  };\n\n  const actionButton = {\n    initial: {\n      action: loadModel,\n      text: \"Load Model\"\n    },\n    loadingModel: {\n      text: \"Loading Model...\"\n    },\n    modelReady: {\n      action: upload,\n      text: \"Upload Image\"\n    },\n    imageReady: {\n      action: identify,\n      text: \"Identify Breed\"\n    },\n    identifying: {\n      text: \"Identifying...\"\n    },\n    complete: {\n      action: reset,\n      text: \"Reset\"\n    }\n  };\n  const {\n    showImage,\n    showResults\n  } = machine.states[appState];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showImage && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageURL,\n      alt: \"upload-preview\",\n      ref: imageRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      capture: \"camera\",\n      onChange: handleUpload,\n      ref: inputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), showResults && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: results.map(({\n        className,\n        probability\n      }) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: `${className}: %${(probability * 100).toFixed(2)}`\n      }, className, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: actionButton[appState].action || (() => {}),\n      children: actionButton[appState].text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"mt-2\",\n      children: \"Close Model\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ImageDetection, \"QcFBbYLF6iwy/GQ02PDUDwr6+Hc=\");\n\n_c = ImageDetection;\nexport default ImageDetection;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageDetection\");","map":{"version":3,"sources":["/home/mattia/Scrivania/detection-app/src/components/ImageDetection.js"],"names":["React","useState","useRef","useReducer","mobilenet","ImageDetection","machine","initial","states","on","next","loadingModel","modelReady","imageReady","showImage","identifying","complete","showResults","results","setResults","imageURL","setImageURL","model","setModel","imageRef","inputRef","reducer","state","event","appState","dispatch","loadModel","load","unloadModel","identify","classify","current","reset","upload","click","handleUpload","files","target","length","url","URL","createObjectURL","actionButton","action","text","map","className","probability","toFixed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useReducer } from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport './ImageDetection.css';\n\nfunction ImageDetection() {\n\n  const machine = {\n    initial: \"initial\",\n    states: {\n      initial: { on: { next: \"loadingModel\" } },\n      loadingModel: { on: { next: \"modelReady\" } },\n      modelReady: { on: { next: \"imageReady\" } },\n      imageReady: { on: { next: \"identifying\" }, showImage: true },\n      identifying: { on: { next: \"complete\" } },\n      complete: { on: { next: \"modelReady\" }, showImage: true, showResults: true }\n    }\n  };\n\n  const [results, setResults] = useState([]);\n  const [imageURL, setImageURL] = useState(null);\n  const [model, setModel] = useState(null);\n  const imageRef = useRef();\n  const inputRef = useRef();\n\n  const reducer = (state, event) =>\n    machine.states[state].on[event] || machine.initial;\n\n  const [appState, dispatch] = useReducer(reducer, machine.initial);\n  const next = () => dispatch(\"next\");\n\n  const loadModel = async () => {\n    next();\n    const model = await mobilenet.load();\n    setModel(model);\n    next();\n  };\n\n  const unloadModel = async () => {\n    setModel(null);\n    setResults([]);\n  }\n\n  const identify = async () => {\n    next();\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n    next();\n  };\n\n  const reset = async () => {\n    setResults([]);\n    next();\n  };\n\n  const upload = () => inputRef.current.click();\n\n  const handleUpload = event => {\n    const { files } = event.target;\n    if (files.length > 0) {\n      const url = URL.createObjectURL(event.target.files[0]);\n      setImageURL(url);\n      next();\n    }\n  };\n\n  const actionButton = {\n    initial: { action: loadModel, text: \"Load Model\" },\n    loadingModel: { text: \"Loading Model...\" },\n    modelReady: { action: upload, text: \"Upload Image\" },\n    imageReady: { action: identify, text: \"Identify Breed\" },\n    identifying: { text: \"Identifying...\" },\n    complete: { action: reset, text: \"Reset\" }\n  };\n\n  const { showImage, showResults } = machine.states[appState];\n\n  return (\n    <div>\n      {showImage && <img src={imageURL} alt=\"upload-preview\" ref={imageRef} />}\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        capture=\"camera\"\n        onChange={handleUpload}\n        ref={inputRef}\n      />\n      {showResults && (\n        <ul>\n          {results.map(({ className, probability }) => (\n            <li key={className}>{`${className}: %${(probability * 100).toFixed(\n              2\n            )}`}</li>\n          ))}\n        </ul>\n      )}\n      <button onClick={actionButton[appState].action || (() => {})}>\n        {actionButton[appState].text}\n      </button>\n      <button className=\"mt-2\">\n        Close Model\n      </button>\n    </div>\n  );\n}\n\nexport default ImageDetection;\n"]},"metadata":{},"sourceType":"module"}