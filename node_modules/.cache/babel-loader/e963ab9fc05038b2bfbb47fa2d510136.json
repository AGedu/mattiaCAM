{"ast":null,"code":"var _jsxFileName = \"/home/mattia/Scrivania/detection-app/src/components/RealDetection.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Webcam from \"react-webcam\";\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\nimport { useRef, useState, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RealDetection() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [stateWebcam, setStateWebcam] = useState(false);\n  const [nameButton, setNameButton] = useState('Start');\n\n  function drawRect(detections, ctx) {\n    // Loop through each prediction\n    detections.forEach(prediction => {\n      // Extract boxes and classes\n      const [x, y, width, height] = prediction['bbox'];\n      const text = prediction['class'] + \" \" + prediction['score']; // Set styling\n\n      const color = Math.floor(Math.random() * 16777215).toString(16);\n      ctx.strokeStyle = '#' + color;\n      ctx.font = '18px Arial'; // Draw rectangles and text\n\n      ctx.beginPath();\n      ctx.fillStyle = '#' + color;\n      ctx.fillText(text, x, y);\n      ctx.rect(x, y, width, height);\n      ctx.stroke();\n    });\n  }\n\n  const runCoco = async () => {\n    const net = await cocossd.load();\n    console.log(\"Handpose model loaded.\"); //  Loop and detect hands\n\n    setInterval(() => {\n      detect(net);\n    }, 10);\n  };\n\n  const detect = async net => {\n    // Check data is available\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; // Set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; // Set canvas height and width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; // Make Detections\n\n      const obj = await net.detect(video); // Draw mesh\n\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawRect(obj, ctx);\n    }\n  };\n\n  function change_state_webcam() {\n    if (stateWebcam === false) {\n      setStateWebcam(true);\n      setNameButton(\"Stop\");\n      runCoco();\n    } else {\n      setStateWebcam(false);\n      setNameButton(\"Start\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Componente1 d-flex flex-column align-items-center mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-white\",\n      children: \"REAL DETECTION\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-outline-danger mb-3\",\n      style: {\n        width: 50\n      },\n      onClick: change_state_webcam,\n      children: nameButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), stateWebcam && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        muted: true,\n        style: {\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RealDetection, \"782a2VKc9GwMUViUn9s4hiuObnw=\");\n\n_c = RealDetection;\nexport default RealDetection;\n\nvar _c;\n\n$RefreshReg$(_c, \"RealDetection\");","map":{"version":3,"sources":["/home/mattia/Scrivania/detection-app/src/components/RealDetection.js"],"names":["React","Webcam","cocossd","useRef","useState","useCallback","RealDetection","webcamRef","canvasRef","stateWebcam","setStateWebcam","nameButton","setNameButton","drawRect","detections","ctx","forEach","prediction","x","y","width","height","text","color","Math","floor","random","toString","strokeStyle","font","beginPath","fillStyle","fillText","rect","stroke","runCoco","net","load","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","obj","getContext","change_state_webcam","marginLeft","marginRight","left","right","textAlign","position"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Webcam from \"react-webcam\";\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\nimport { useRef, useState, useCallback } from \"react\";\n\nfunction RealDetection(){\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [stateWebcam, setStateWebcam] = useState(false);\n  const [nameButton, setNameButton] = useState('Start');\n\n  function drawRect (detections, ctx){\n    // Loop through each prediction\n    detections.forEach(prediction => {\n\n      // Extract boxes and classes\n      const [x, y, width, height] = prediction['bbox'];\n      const text = prediction['class'] + \" \" + prediction['score'];\n\n      // Set styling\n      const color = Math.floor(Math.random()*16777215).toString(16);\n      ctx.strokeStyle = '#' + color\n      ctx.font = '18px Arial';\n\n      // Draw rectangles and text\n      ctx.beginPath();\n      ctx.fillStyle = '#' + color\n      ctx.fillText(text, x, y);\n      ctx.rect(x, y, width, height);\n      ctx.stroke();\n    });\n  }\n\n  const runCoco = async () => {\n    const net = await cocossd.load();\n    console.log(\"Handpose model loaded.\");\n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 10);\n  };\n\n  const detect = async (net) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n\n\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      const obj = await net.detect(video);\n\n\n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawRect(obj, ctx);\n    }\n  };\n\n  function change_state_webcam(){\n    if(stateWebcam === false){\n      setStateWebcam(true);\n      setNameButton(\"Stop\");\n      runCoco();\n    }\n    else{\n      setStateWebcam(false);\n      setNameButton(\"Start\");\n    }\n  }\n\n  return(\n    <div className=\"Componente1 d-flex flex-column align-items-center mt-5\">\n      <h1 className=\"text-white\">REAL DETECTION</h1>\n      <button className=\"btn btn-outline-danger mb-3\" style={{width:50,}} onClick={change_state_webcam}>{nameButton}</button>\n      {stateWebcam && (\n        <div>\n          <Webcam\n            ref={webcamRef}\n            muted={true}\n            style={{\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              left: 0,\n              right: 0,\n              textAlign: \"center\",\n              width: 640,\n              height: 480,\n            }}\n          />\n          <canvas\n            ref={canvasRef}\n            style={{\n              position: \"absolute\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              left: 0,\n              right: 0,\n              textAlign: \"center\",\n              width: 640,\n              height: 480,\n            }}\n          />\n        </div>\n\n      )}\n    </div>\n  );\n}\n\nexport default RealDetection;\n"]},"metadata":{},"sourceType":"module"}